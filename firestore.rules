service cloud.firestore {
	match /databases/{database}/documents {
    	function isSignedIn() {
    		return request.auth != null;
    	}
      function getDoc(id, col) {
        return get(/databases/$(database)/documents/$(col)/$(id)).data
      }

      function docExists(id, col) {
      	return exists(/databases/$(database)/documents/$(col)/$(id))
      }

      function data() {
        return request.resource.data;
      }

			function validTimestamp() {
				return data().timestamp is timestamp;
			}

    	match /delivery/{deliveryId} {
    		allow read: if true;

    		allow create, update:
  				if request.resource.keys().hasAll(['timetamp, driver, banjar'])
  				//driver exists and his role is employee
  				&& getDoc(data().driver.id, 'person').type.employee == true
  				//timestamp
  				&& validTimestamp()
  				//banjar exists
  				&& docExists(data().banjar.id, 'banjar')
      }

    	match /sale/{saleId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['buyer', 'materials'])
	      	&& getDoc(data().buyer.id, 'person').type.buyer == true
	    }

    	match /settings/{settingsId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['name', 'village'])
	      	&& data().name is string
	      	&& data().village is string
    	}

    	match /expense/{expenseId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['person', 'amount'])
	      	&& data().amount is int
	      	&& getDoc(data().person.id, 'person').type.buyer == true
    	}

    	match /stock/{stockId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['timestamp', 'material', 'amount'])
	      	&& data().amount is float
	      	&& validTimestamp()
    	}

    	match /fee/{feeId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['monthly_fee', 'total_paid', 'paid_until', 'timestamp'])
	      	&& data().monthly_fee is int
	      	&& data().total_paid is int
	      	&& validTimestamp()
	      	&& data().paid_until is timestamp
    	}

    	match /banjar/{banjarId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['name'])
	      	&& data().name is string
    	}

    	match /material/{materialId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['worker', 'banjar', 'timestamp'])
	      	&& data().keys().hasAny(['organic', 'inorganic'])
	      	&& getDoc(data().worker.id, 'person').type.employee == true
	      	&& docExists(data().banjar.id, 'banjar')
	      	&& validTimestamp()
    	}

    	match /materialType/{materialTypeId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['name', 'pricePerKilo'])
	      	&& data().name is string
	      	&& data().pricePerKilo is int;
    	}

    	match /houseType/{houseTypeId} {
	      allow read: if true;

	      allow create, update:
	      	if data().keys().hasAll(['name', 'collectionFee'])
	      	&& data().name is string
	      	&& data().collectionFee is int;
    	}
  	}
  }
}
